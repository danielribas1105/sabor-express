[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "exibir_nome_app",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def exibir_nome_app():\n    print(\"\"\"\n░██████╗░█████╗░██████╗░░█████╗░██████╗░  ███████╗██╗░░██╗██████╗░██████╗░███████╗░██████╗░██████╗\n██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗  ██╔════╝╚██╗██╔╝██╔══██╗██╔══██╗██╔════╝██╔════╝██╔════╝\n╚█████╗░███████║██████╦╝██║░░██║██████╔╝  █████╗░░░╚███╔╝░██████╔╝██████╔╝█████╗░░╚█████╗░╚█████╗░\n░╚═══██╗██╔══██║██╔══██╗██║░░██║██╔══██╗  ██╔══╝░░░██╔██╗░██╔═══╝░██╔══██╗██╔══╝░░░╚═══██╗░╚═══██╗\n██████╔╝██║░░██║██████╦╝╚█████╔╝██║░░██║  ███████╗██╔╝╚██╗██║░░░░░██║░░██║███████╗██████╔╝██████╔╝\n╚═════╝░╚═╝░░╚═╝╚═════╝░░╚════╝░╚═╝░░╚═╝  ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░╚═╝╚══════╝╚═════╝░╚═════╝░\n\"\"\")\ndef exibir_opcoes():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "exibir_opcoes",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def exibir_opcoes():\n    print('1. Cadastrar restaurante')\n    print('2. Listar restaurante')\n    print('3. Alternar estado restaurante')\n    print('4. Sair')\ndef opcao_invalida():\n    print('Opção inválida!')\n    voltar_menu_principal()\ndef exibir_subtitulo(texto):\n    os.system('cls')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "opcao_invalida",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def opcao_invalida():\n    print('Opção inválida!')\n    voltar_menu_principal()\ndef exibir_subtitulo(texto):\n    os.system('cls')\n    linha = '*' * len(texto)\n    print(linha)\n    print(texto)\n    print(linha)\ndef cadastrar_novo_restaurante():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "exibir_subtitulo",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def exibir_subtitulo(texto):\n    os.system('cls')\n    linha = '*' * len(texto)\n    print(linha)\n    print(texto)\n    print(linha)\ndef cadastrar_novo_restaurante():\n    '''Função para realizar o cadastro de novos restaurantes\n    Inputs:\n    - Nome do restaurante",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cadastrar_novo_restaurante",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def cadastrar_novo_restaurante():\n    '''Função para realizar o cadastro de novos restaurantes\n    Inputs:\n    - Nome do restaurante\n    - Categoria do restaurante\n    Output:\n    - Acrescenta um restaurante a lista de restaurantes\n    '''\n    exibir_subtitulo('Cadastro de novo restaurante\\n')\n    nome_restaurante = input('Digite o nome do restaurante para cadastro: ')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "listar_restaurantes",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def listar_restaurantes():\n    '''Essa função lista os restaurantes cadastrados'''\n    exibir_subtitulo('Listando restaurantes cadastrados')\n    for restaurante in restaurantes:\n        nome_restaurante = restaurante['nome']\n        categoria = restaurante['categoria']\n        ativo = 'Ativado' if restaurante['ativo'] else 'Desativado'\n        print(f'. {nome_restaurante.ljust(20)} | {categoria.ljust(20)} | {ativo}\\n')\n    voltar_menu_principal()\ndef alterar_estado_restaurante():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "alterar_estado_restaurante",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def alterar_estado_restaurante():\n    '''Função para alternar o estado de um restaurante'''\n    exibir_subtitulo('Alterando estado do restaurante\\n')\n    nome_restaurante = input('Digite o nome do restaurante para alterar o estado: ')\n    restaurante_encontrado = False\n    for restaurante in restaurantes:\n        if nome_restaurante == restaurante['nome']:\n            restaurante_encontrado = True\n            restaurante['ativo'] = not restaurante['ativo']\n            mensagem = f'O restaurante {nome_restaurante} foi ativado com sucesso' if restaurante['ativo'] else f'O restaurante {nome_restaurante} foi desativado com sucesso'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "escolher_opcao",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def escolher_opcao():\n    try:\n        opcao_selecionada = int(input('\\nEscolha uma opção: '))\n        print(f'Você escolheu a opção {opcao_selecionada}')\n        match opcao_selecionada:\n            case 1:\n                cadastrar_novo_restaurante()\n            case 2:\n                listar_restaurantes()\n            case 3:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "finalizar_app",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def finalizar_app():\n    exibir_subtitulo('App finalizado!\\n')\ndef voltar_menu_principal():\n    input('\\nDigite uma tecla para voltar ao menu principal')\n    main()\ndef main():\n    exibir_nome_app()\n    exibir_opcoes()\n    escolher_opcao()\nif __name__ == '__main__':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "voltar_menu_principal",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def voltar_menu_principal():\n    input('\\nDigite uma tecla para voltar ao menu principal')\n    main()\ndef main():\n    exibir_nome_app()\n    exibir_opcoes()\n    escolher_opcao()\nif __name__ == '__main__':\n    main()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main():\n    exibir_nome_app()\n    exibir_opcoes()\n    escolher_opcao()\nif __name__ == '__main__':\n    main()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "restaurantes",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "restaurantes = [{'nome':'Pizza da Nona', 'categoria':'Pizzas', 'ativo': False}, \n                {'nome':'Shushi da Praça', 'categoria':'Japa', 'ativo': True},\n                {'nome':'Kilograma', 'categoria':'Kilo', 'ativo': True},\n]\ndef exibir_nome_app():\n    print(\"\"\"\n░██████╗░█████╗░██████╗░░█████╗░██████╗░  ███████╗██╗░░██╗██████╗░██████╗░███████╗░██████╗░██████╗\n██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗  ██╔════╝╚██╗██╔╝██╔══██╗██╔══██╗██╔════╝██╔════╝██╔════╝\n╚█████╗░███████║██████╦╝██║░░██║██████╔╝  █████╗░░░╚███╔╝░██████╔╝██████╔╝█████╗░░╚█████╗░╚█████╗░\n░╚═══██╗██╔══██║██╔══██╗██║░░██║██╔══██╗  ██╔══╝░░░██╔██╗░██╔═══╝░██╔══██╗██╔══╝░░░╚═══██╗░╚═══██╗",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "contar_vogais",
        "kind": 2,
        "importPath": "conta_vogais",
        "description": "conta_vogais",
        "peekOfCode": "def contar_vogais(texto):\n    vogais = \"aeiouáé\"\n    quantidade = 0\n    for letra in texto.lower():\n        if letra in vogais:\n            quantidade += 1\n    return quantidade\ntexto = input('Digite um texto: ')\nprint(f'O texto contém {contar_vogais(texto)} vogais')",
        "detail": "conta_vogais",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "conta_vogais",
        "description": "conta_vogais",
        "peekOfCode": "texto = input('Digite um texto: ')\nprint(f'O texto contém {contar_vogais(texto)} vogais')",
        "detail": "conta_vogais",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "exerc_01",
        "description": "exerc_01",
        "peekOfCode": "idade = input(\"Informe sua idade: \")\nprint(f'Meu nome é {nome} e tenho {idade} anos') \"\"\"\nprint('''\nA\nL\nU\nR\nA\n''')\nprint('A','L','U','R','A',sep='\\n')",
        "detail": "exerc_01",
        "documentation": {}
    },
    {
        "label": "pi",
        "kind": 5,
        "importPath": "exerc_01",
        "description": "exerc_01",
        "peekOfCode": "pi = 3.14159\n# Abordagem de f-string\nprint(f'\\nO valor arredondado de pi é: {pi:.2f}')\n# Abordagem de .format()\nprint('\\nO valor arredondado de pi é: {:.2f}'.format(pi))\n# Utilizando a função round()\nprint(f'\\nO valor arredondado de pi é: {round(pi, 2)}')\nlista_de_numeros = [1,2,3,4,5,6,7,8,9,10]\nfor numero in lista_de_numeros:\n    print(numero)",
        "detail": "exerc_01",
        "documentation": {}
    },
    {
        "label": "lista_de_numeros",
        "kind": 5,
        "importPath": "exerc_01",
        "description": "exerc_01",
        "peekOfCode": "lista_de_numeros = [1,2,3,4,5,6,7,8,9,10]\nfor numero in lista_de_numeros:\n    print(numero)",
        "detail": "exerc_01",
        "documentation": {}
    },
    {
        "label": "calcular_idade",
        "kind": 2,
        "importPath": "exerc_02",
        "description": "exerc_02",
        "peekOfCode": "def calcular_idade(ano_nascimento, ano_atual):\n    return ano_atual - ano_nascimento\nano_nascimento = input('Digite o ano de nascimento: ')\nano_atual = input('Digite o ano atual: ')\nprint(f'A idade é {calcular_idade(int(ano_nascimento), int(ano_atual))} anos.')",
        "detail": "exerc_02",
        "documentation": {}
    },
    {
        "label": "ano_nascimento",
        "kind": 5,
        "importPath": "exerc_02",
        "description": "exerc_02",
        "peekOfCode": "ano_nascimento = input('Digite o ano de nascimento: ')\nano_atual = input('Digite o ano atual: ')\nprint(f'A idade é {calcular_idade(int(ano_nascimento), int(ano_atual))} anos.')",
        "detail": "exerc_02",
        "documentation": {}
    },
    {
        "label": "ano_atual",
        "kind": 5,
        "importPath": "exerc_02",
        "description": "exerc_02",
        "peekOfCode": "ano_atual = input('Digite o ano atual: ')\nprint(f'A idade é {calcular_idade(int(ano_nascimento), int(ano_atual))} anos.')",
        "detail": "exerc_02",
        "documentation": {}
    },
    {
        "label": "alunos",
        "kind": 5,
        "importPath": "exerc_03",
        "description": "exerc_03",
        "peekOfCode": "alunos = [\n    {\"nome\": \"Alice\", \"curso\": \"Python Avançado\"},\n    {\"nome\": \"Bruno\", \"curso\": \"Python Avançado\"},\n    {\"nome\": \"Carlos\", \"curso\": \"Java para Iniciantes\"},\n    {\"nome\": \"Daniela\", \"curso\": \"Machine Learning\"},\n    {\"nome\": \"Alice\", \"curso\": \"Python Avançado\"},\n]\nasync def inscrever_aluno(aluno):\n    curso_nome = aluno[\"curso\"]\n    nome_aluno = aluno[\"nome\"]",
        "detail": "exerc_03",
        "documentation": {}
    },
    {
        "label": "VELOCIDADE_DOWNLOAD",
        "kind": 5,
        "importPath": "exerc_03",
        "description": "exerc_03",
        "peekOfCode": "VELOCIDADE_DOWNLOAD = 5 \nasync def baixar_arquivo(nome, tamanho):\n    print(f\"Iniciando download de {nome} (tamanho: {tamanho}MB)...\")\n    baixado = 0\n    segundos = 0\n    while baixado < tamanho:\n        await asyncio.sleep(1)  \n        baixado += VELOCIDADE_DOWNLOAD\n        baixado = min(baixado, tamanho)\n        segundos += 1",
        "detail": "exerc_03",
        "documentation": {}
    },
    {
        "label": "jogos",
        "kind": 5,
        "importPath": "exerc_03",
        "description": "exerc_03",
        "peekOfCode": "jogos = [\n    {\"id\": 1, \"times\": (\"Flamengo\", \"Palmeiras\")},\n    {\"id\": 2, \"times\": (\"São Paulo\", \"Corinthians\")},\n    {\"id\": 3, \"times\": (\"Grêmio\", \"Internacional\")},\n]\nasync def processar_aposta(jogo, futuro):\n    tempo = random.randint(2, 8)\n    print(f\"Aposta no jogo {jogo['id']} ({jogo['times'][0]} vs {jogo['times'][1]}) registrada! Aguardando resultado...\\n\")\n    await asyncio.sleep(tempo)\n    resultado = random.choice([f\"Vitória do {jogo['times'][0]}\", f\"Vitória do {jogo['times'][1]}\", \"Empate\"])",
        "detail": "exerc_03",
        "documentation": {}
    },
    {
        "label": "gerar_senha",
        "kind": 2,
        "importPath": "gerador_senhas",
        "description": "gerador_senhas",
        "peekOfCode": "def gerar_senha():\n    maiusculas = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    minusculas = \"abcdefghijklmnopqrstuvwxyz\"\n    numeros = \"0123456789\"\n    especiais = \"!@#$%&*\"\n    senha = [\n        random.choice(maiusculas),\n        random.choice(minusculas),\n        random.choice(numeros),     \n        random.choice(especiais)    ",
        "detail": "gerador_senhas",
        "documentation": {}
    },
    {
        "label": "valor_conta",
        "kind": 5,
        "importPath": "gorjeta",
        "description": "gorjeta",
        "peekOfCode": "valor_conta = float(input('Digite o valor da conta: '))\nporcentagem = float(input('Digite a porcentagem da gorjeta: '))\ngorjeta = valor_conta * (porcentagem/100)\nprint(f'Valor da gorjeta: R${gorjeta:.2f}')\nprint(f'Total a pagar: R${(valor_conta + gorjeta):.2f}')",
        "detail": "gorjeta",
        "documentation": {}
    },
    {
        "label": "porcentagem",
        "kind": 5,
        "importPath": "gorjeta",
        "description": "gorjeta",
        "peekOfCode": "porcentagem = float(input('Digite a porcentagem da gorjeta: '))\ngorjeta = valor_conta * (porcentagem/100)\nprint(f'Valor da gorjeta: R${gorjeta:.2f}')\nprint(f'Total a pagar: R${(valor_conta + gorjeta):.2f}')",
        "detail": "gorjeta",
        "documentation": {}
    },
    {
        "label": "gorjeta",
        "kind": 5,
        "importPath": "gorjeta",
        "description": "gorjeta",
        "peekOfCode": "gorjeta = valor_conta * (porcentagem/100)\nprint(f'Valor da gorjeta: R${gorjeta:.2f}')\nprint(f'Total a pagar: R${(valor_conta + gorjeta):.2f}')",
        "detail": "gorjeta",
        "documentation": {}
    },
    {
        "label": "validar_cpf",
        "kind": 2,
        "importPath": "valida_cpf",
        "description": "valida_cpf",
        "peekOfCode": "def validar_cpf(cpf):\n    if not cpf.isdigit():\n        return \"Erro: O CPF deve conter apenas números.\"\n    if len(cpf) != 11:\n        return \"Erro: O CPF deve ter exatamente 11 dígitos.\"\n    return \"CPF válido\"\ncpf = input('Digite seu CPF: ')\nprint(validar_cpf(cpf))",
        "detail": "valida_cpf",
        "documentation": {}
    },
    {
        "label": "cpf",
        "kind": 5,
        "importPath": "valida_cpf",
        "description": "valida_cpf",
        "peekOfCode": "cpf = input('Digite seu CPF: ')\nprint(validar_cpf(cpf))",
        "detail": "valida_cpf",
        "documentation": {}
    }
]